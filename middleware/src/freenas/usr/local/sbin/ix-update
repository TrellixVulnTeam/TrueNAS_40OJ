#!/bin/bash -e

readonly UPDATE_FAILED_LOG="/data/update.failed"

if [ ! -f /data/need-update ]
then
    exit 0
fi

REBOOT_SYSTEM=0
TRUENAS_CONFIG="/data/freenas-v1.db"
if [ -f /data/uploaded.db ]; then
    echo "Saving current ${TRUENAS_CONFIG} to ${TRUENAS_CONFIG}.bak"
    cp ${TRUENAS_CONFIG} ${TRUENAS_CONFIG}.bak

    echo "Moving uploaded config to ${TRUENAS_CONFIG}"
    mv /data/uploaded.db ${TRUENAS_CONFIG}
    if [ -f /data/pwenc_secret_uploaded ]; then
        if [ -f /data/pwenc_secret ]; then
            echo "Saving current pwenc secret to /data/pwenc_secret.bak"
            cp /data/pwenc_secret /data/pwenc_secret.bak
        fi
    echo "Moving uploaded pwenc secret to /data/pwenc_secret"
    mv /data/pwenc_secret_uploaded /data/pwenc_secret
    fi
fi

migrate > $UPDATE_FAILED_LOG 2>&1

echo "REPLACE INTO system_keyvalue (key, value) VALUES ('run_migration', 'true')" | sqlite3 /data/freenas-v1.db

ret=0
truenas-initrd.py "/" > $UPDATE_FAILED_LOG 2>&1 || ret=$?
if [ $ret -eq 1 ]; then
	REBOOT_SYSTEM=1
fi

if [ $ret -le 1 ]; then
	rm -f $UPDATE_FAILED_LOG
fi

rm /data/need-update

if [ "${REBOOT_SYSTEM}" = "1" ]; then
	# We use force flag so that system does not actually perform a shutdown and instead reboots directly
	# We do not have middleware running at this point, so this should be good
	reboot -f;
fi
